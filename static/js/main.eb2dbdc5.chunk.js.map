{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAAEC,GAClB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,8BAA0BF,EAAMG,QAAQC,GAAxC,0BAAqEC,IAAI,YACjF,6BAAML,EAAMG,QAAQG,OACpB,4BAAKN,EAAMG,QAAQI,YCFlBC,EAAW,SAAER,GACtB,OACA,qBAAKC,UAAU,YAAf,SAEMD,EAAMS,SAASC,KAAK,SAAAP,GAAO,OACzB,cAAC,EAAD,CAAyBA,QAAUA,GAAvBA,EAAQC,UCRnBO,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBAAOC,KAAK,SAASb,UAAU,SAASW,YAAcA,EAAcG,SAAWF,MCqCxEG,E,kDAlCb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBC,MAAM,6CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKC,SAAU,CAAEf,SAAUc,S,oBAG7C,WAAS,IAAD,OAEN,EAAkCE,KAAKR,MAA/BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAQ,SAAAxB,GAAO,OAC/CA,EAAQG,KAAKsB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBACrBC,aAAe,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAC5D,cAAC,EAAD,CAAUvB,SAAWiB,W,GA5BXO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eb2dbdc5.chunk.js","sourcesContent":["import './card.styles.css'\r\n\r\nexport const Card = ( props ) => {\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img src={ `http://robohash.org/${props.monster.id}?set=set2&size=180x180` } alt=\"monster\" />\r\n            <h2>{ props.monster.name }</h2>\r\n            <p>{ props.monster.email }</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './card-list.styles.css'\r\n\r\nimport { Card } from '../card/card.component'\r\n\r\nexport const CardList = ( props ) => {\r\n    return( \r\n    <div className=\"card-list\">\r\n        {\r\n          props.monsters.map( monster => (\r\n            <Card key={ monster.id } monster={ monster } />\r\n          ))\r\n        }\r\n    </div>\r\n    )\r\n}","import './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return(\r\n        <input type=\"search\" className=\"search\" placeholder={ placeholder } onChange={ handleChange }/> \r\n    )\r\n}","import './App.css';\nimport { Component } from 'react'\n\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('http://jsonplaceholder.typicode.com/users')\n    .then( response => response.json())\n    .then( users => this.setState( { monsters: users } ))\n  }\n\n  render(){\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter( monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"Search Monsters\" \n          handleChange={ e => this.setState({ searchField: e.target.value }) }/>\n        <CardList monsters={ filteredMonsters } /> \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}